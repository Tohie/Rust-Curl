/* automatically generated by rust-bindgen */

#![allow(non_camel_case_types)]

extern crate libc;

use libc::*;
pub type __int128_t = c_void;
pub type __uint128_t = c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub type __u_char = c_uchar;
pub type __u_short = c_ushort;
pub type __u_int = c_uint;
pub type __u_long = c_ulong;
pub type __int8_t = c_char;
pub type __uint8_t = c_uchar;
pub type __int16_t = c_short;
pub type __uint16_t = c_ushort;
pub type __int32_t = c_int;
pub type __uint32_t = c_uint;
pub type __int64_t = c_long;
pub type __uint64_t = c_ulong;
pub type __quad_t = c_long;
pub type __u_quad_t = c_ulong;
pub type __dev_t = c_ulong;
pub type __uid_t = c_uint;
pub type __gid_t = c_uint;
pub type __ino_t = c_ulong;
pub type __ino64_t = c_ulong;
pub type __mode_t = c_uint;
pub type __nlink_t = c_ulong;
pub type __off_t = c_long;
pub type __off64_t = c_long;
pub type __pid_t = c_int;
pub struct __fsid_t {
    pub __val: [c_int, ..2u],
}
pub type __clock_t = c_long;
pub type __rlim_t = c_ulong;
pub type __rlim64_t = c_ulong;
pub type __id_t = c_uint;
pub type __time_t = c_long;
pub type __useconds_t = c_uint;
pub type __suseconds_t = c_long;
pub type __daddr_t = c_int;
pub type __key_t = c_int;
pub type __clockid_t = c_int;
pub type __timer_t = *mut c_void;
pub type __blksize_t = c_long;
pub type __blkcnt_t = c_long;
pub type __blkcnt64_t = c_long;
pub type __fsblkcnt_t = c_ulong;
pub type __fsblkcnt64_t = c_ulong;
pub type __fsfilcnt_t = c_ulong;
pub type __fsfilcnt64_t = c_ulong;
pub type __fsword_t = c_long;
pub type __ssize_t = c_long;
pub type __syscall_slong_t = c_long;
pub type __syscall_ulong_t = c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut c_char;
pub type __intptr_t = c_long;
pub type __socklen_t = c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ptrdiff_t = c_long;
pub type size_t = c_ulong;
pub type wchar_t = c_int;
pub type ulong = c_ulong;
pub type ushort = c_ushort;
pub type _uint = c_uint;
pub type int8_t = c_char;
pub type int16_t = c_short;
pub type int32_t = c_int;
pub type int64_t = c_long;
pub type u_int8_t = c_uchar;
pub type u_int16_t = c_ushort;
pub type u_int32_t = c_uint;
pub type u_int64_t = c_ulong;
pub type register_t = c_long;
pub type __sig_atomic_t = c_int;
pub struct __sigset_t {
    pub __val: [c_ulong, ..16u],
}
pub type sigset_t = __sigset_t;
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = c_long;
pub struct fd_set {
    pub __fds_bits: [__fd_mask, ..16u],
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = c_ulong;
pub struct Union_pthread_attr_t {
    pub data: [u64, ..7u],
}
impl Union_pthread_attr_t {
    pub fn __size(&mut self) -> *mut [c_char, ..56u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
pub struct Struct___pthread_mutex_s {
    pub __lock: c_int,
    pub __count: c_uint,
    pub __owner: c_int,
    pub __nusers: c_uint,
    pub __kind: c_int,
    pub __spins: c_short,
    pub __elision: c_short,
    pub __list: __pthread_list_t,
}
pub struct pthread_mutex_t {
    pub data: [u64, ..5u],
}
impl pthread_mutex_t {
    pub fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [c_char, ..40u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct pthread_mutexattr_t {
    pub data: [u32, ..1u],
}
impl pthread_mutexattr_t {
    pub fn __size(&mut self) -> *mut [c_char, ..4u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct Struct_Unnamed1 {
    pub __lock: c_int,
    pub __futex: c_uint,
    pub __total_seq: c_ulonglong,
    pub __wakeup_seq: c_ulonglong,
    pub __woken_seq: c_ulonglong,
    pub __mutex: *mut c_void,
    pub __nwaiters: c_uint,
    pub __broadcast_seq: c_uint,
}
pub struct pthread_cond_t {
    pub data: [u64, ..6u],
}
impl pthread_cond_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed1 {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [c_char, ..48u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_longlong {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct pthread_condattr_t {
    pub data: [u32, ..1u],
}
impl pthread_condattr_t {
    pub fn __size(&mut self) -> *mut [c_char, ..4u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type pthread_key_t = c_uint;
pub type pthread_once_t = c_int;
pub struct Struct_Unnamed2 {
    pub __lock: c_int,
    pub __nr_readers: c_uint,
    pub __readers_wakeup: c_uint,
    pub __writer_wakeup: c_uint,
    pub __nr_readers_queued: c_uint,
    pub __nr_writers_queued: c_uint,
    pub __writer: c_int,
    pub __shared: c_int,
    pub __pad1: c_ulong,
    pub __pad2: c_ulong,
    pub __flags: c_uint,
}
pub struct pthread_rwlock_t {
    pub data: [u64, ..7u],
}
impl pthread_rwlock_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed2 {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [c_char, ..56u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct pthread_rwlockattr_t {
    pub data: [u64, ..1u],
}
impl pthread_rwlockattr_t {
    pub fn __size(&mut self) -> *mut [c_char, ..8u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type pthread_spinlock_t = c_int;
pub struct pthread_barrier_t {
    pub data: [u64, ..4u],
}
impl pthread_barrier_t {
    pub fn __size(&mut self) -> *mut [c_char, ..32u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct pthread_barrierattr_t {
    pub data: [u32, ..1u],
}
impl pthread_barrierattr_t {
    pub fn __size(&mut self) -> *mut [c_char, ..4u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct Struct_iovec {
    pub iov_base: *mut c_void,
    pub iov_len: size_t,
}
pub type socklen_t = __socklen_t;
pub type Enum___socket_type = c_uint;
pub static SOCK_STREAM: c_uint = 1;
pub static SOCK_DGRAM: c_uint = 2;
pub static SOCK_RAW: c_uint = 3;
pub static SOCK_RDM: c_uint = 4;
pub static SOCK_SEQPACKET: c_uint = 5;
pub static SOCK_DCCP: c_uint = 6;
pub static SOCK_PACKET: c_uint = 10;
pub static SOCK_CLOEXEC: c_uint = 524288;
pub static SOCK_NONBLOCK: c_uint = 2048;
pub type sa_family_t = c_ushort;
pub struct Struct_sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [c_char, ..14u],
}
pub struct Struct_sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: c_ulong,
    pub __ss_padding: [c_char, ..112u],
}
pub type Enum_Unnamed3 = c_uint;
pub static MSG_OOB: c_uint = 1;
pub static MSG_PEEK: c_uint = 2;
pub static MSG_DONTROUTE: c_uint = 4;
pub static MSG_CTRUNC: c_uint = 8;
pub static MSG_PROXY: c_uint = 16;
pub static MSG_TRUNC: c_uint = 32;
pub static MSG_DONTWAIT: c_uint = 64;
pub static MSG_EOR: c_uint = 128;
pub static MSG_WAITALL: c_uint = 256;
pub static MSG_FIN: c_uint = 512;
pub static MSG_SYN: c_uint = 1024;
pub static MSG_CONFIRM: c_uint = 2048;
pub static MSG_RST: c_uint = 4096;
pub static MSG_ERRQUEUE: c_uint = 8192;
pub static MSG_NOSIGNAL: c_uint = 16384;
pub static MSG_MORE: c_uint = 32768;
pub static MSG_WAITFORONE: c_uint = 65536;
pub static MSG_FASTOPEN: c_uint = 536870912;
pub static MSG_CMSG_CLOEXEC: c_uint = 1073741824;
pub struct Struct_msghdr {
    pub msg_name: *mut c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut Struct_iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut c_void,
    pub msg_controllen: size_t,
    pub msg_flags: c_int,
}
pub struct Struct_cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: c_int,
    pub cmsg_type: c_int,
    pub __cmsg_data: c_void,
}
pub type Enum_Unnamed4 = c_uint;
pub static SCM_RIGHTS: c_uint = 1;
pub struct Struct_linger {
    pub l_onoff: c_int,
    pub l_linger: c_int,
}
pub struct Struct_osockaddr {
    pub sa_family: c_ushort,
    pub sa_data: [c_uchar, ..14u],
}
pub type Enum_Unnamed5 = c_uint;
pub static SHUT_RD: c_uint = 0;
pub static SHUT_WR: c_uint = 1;
pub static SHUT_RDWR: c_uint = 2;
pub type curl_socklen_t = socklen_t;
pub type curl_off_t = c_long;
pub type __curl_rule_01__ = [c_char, ..1u];
pub type __curl_rule_02__ = [c_char, ..1u];
pub type __curl_rule_03__ = [c_char, ..1u];
pub type __curl_rule_04__ = [c_char, ..1u];
pub type __curl_rule_05__ = [c_char, ..1u];
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
pub struct Union_Unnamed6 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed6 {
    pub fn __wch(&mut self) -> *mut c_uint {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __wchb(&mut self) -> *mut [c_char, ..4u] {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct __mbstate_t {
    pub __count: c_int,
    pub __value: Union_Unnamed6,
}
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type Struct__IO_jump_t = c_void;
pub type _IO_lock_t = c_void;
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: c_int,
}
pub type Enum___codecvt_result = c_uint;
pub static __codecvt_ok: c_uint = 0;
pub static __codecvt_partial: c_uint = 1;
pub static __codecvt_error: c_uint = 2;
pub static __codecvt_noconv: c_uint = 3;
pub struct Struct__IO_FILE {
    pub _flags: c_int,
    pub _IO_read_ptr: *mut c_char,
    pub _IO_read_end: *mut c_char,
    pub _IO_read_base: *mut c_char,
    pub _IO_write_base: *mut c_char,
    pub _IO_write_ptr: *mut c_char,
    pub _IO_write_end: *mut c_char,
    pub _IO_buf_base: *mut c_char,
    pub _IO_buf_end: *mut c_char,
    pub _IO_save_base: *mut c_char,
    pub _IO_backup_base: *mut c_char,
    pub _IO_save_end: *mut c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: c_int,
    pub _flags2: c_int,
    pub _old_offset: __off_t,
    pub _cur_column: c_ushort,
    pub _vtable_offset: c_char,
    pub _shortbuf: [c_char, ..1u],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut c_void,
    pub __pad2: *mut c_void,
    pub __pad3: *mut c_void,
    pub __pad4: *mut c_void,
    pub __pad5: size_t,
    pub _mode: c_int,
    pub _unused2: [c_char, ..20u],
}
pub type _IO_FILE = Struct__IO_FILE;
pub type Struct__IO_FILE_plus = c_void;
pub type __io_read_fn = c_void;
pub type __io_write_fn = c_void;
pub type __io_seek_fn = c_void;
pub type __io_close_fn = c_void;
pub type fpos_t = _G_fpos_t;
pub struct Struct_tm {
    pub tm_sec: c_int,
    pub tm_min: c_int,
    pub tm_hour: c_int,
    pub tm_mday: c_int,
    pub tm_mon: c_int,
    pub tm_year: c_int,
    pub tm_wday: c_int,
    pub tm_yday: c_int,
    pub tm_isdst: c_int,
    pub tm_gmtoff: c_long,
    pub tm_zone: *c_char,
}
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
pub type Struct_sigevent = c_void;
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data, ..13u],
    pub __ctype_b: *c_ushort,
    pub __ctype_tolower: *c_int,
    pub __ctype_toupper: *c_int,
    pub __names: [*c_char, ..13u],
}
pub type Struct___locale_data = c_void;
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub struct Struct_timezone {
    pub tz_minuteswest: c_int,
    pub tz_dsttime: c_int,
}
pub type __timezone_ptr_t = *mut Struct_timezone;
pub type Enum___itimer_which = c_uint;
pub static ITIMER_REAL: c_uint = 0;
pub static ITIMER_VIRTUAL: c_uint = 1;
pub static ITIMER_PROF: c_uint = 2;
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
pub type __itimer_which_t = c_int;
pub type CURL = c_void;
pub type curl_socket_t = c_int;
pub struct Struct_curl_httppost {
    pub next: *mut Struct_curl_httppost,
    pub name: *mut c_char,
    pub namelength: c_long,
    pub contents: *mut c_char,
    pub contentslength: c_long,
    pub buffer: *mut c_char,
    pub bufferlength: c_long,
    pub contenttype: *mut c_char,
    pub contentheader: *mut Struct_curl_slist,
    pub more: *mut Struct_curl_httppost,
    pub flags: c_long,
    pub showfilename: *mut c_char,
    pub userp: *mut c_void,
}
pub type curl_progress_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: c_double,
                               arg3: c_double, arg4: c_double, arg5: c_double)
                              -> c_int>;
pub type curl_xferinfo_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: curl_off_t,
                               arg3: curl_off_t, arg4: curl_off_t,
                               arg5: curl_off_t) -> c_int>;
pub type curl_write_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_char, arg2: size_t, arg3: size_t,
                               arg4: *mut c_void) -> size_t>;
pub type curlfiletype = c_uint;
pub static CURLFILETYPE_FILE: c_uint = 0;
pub static CURLFILETYPE_DIRECTORY: c_uint = 1;
pub static CURLFILETYPE_SYMLINK: c_uint = 2;
pub static CURLFILETYPE_DEVICE_BLOCK: c_uint = 3;
pub static CURLFILETYPE_DEVICE_CHAR: c_uint = 4;
pub static CURLFILETYPE_NAMEDPIPE: c_uint = 5;
pub static CURLFILETYPE_SOCKET: c_uint = 6;
pub static CURLFILETYPE_DOOR: c_uint = 7;
pub static CURLFILETYPE_UNKNOWN: c_uint = 8;
pub struct Struct_curl_fileinfo {
    pub filename: *mut c_char,
    pub filetype: curlfiletype,
    pub time: time_t,
    pub perm: c_uint,
    pub uid: c_int,
    pub gid: c_int,
    pub size: curl_off_t,
    pub hardlinks: c_long,
    pub strings: Struct_Unnamed7,
    pub flags: c_uint,
    pub b_data: *mut c_char,
    pub b_size: size_t,
    pub b_used: size_t,
}
pub struct Struct_Unnamed7 {
    pub time: *mut c_char,
    pub perm: *mut c_char,
    pub user: *mut c_char,
    pub group: *mut c_char,
    pub target: *mut c_char,
}
pub type curl_chunk_bgn_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *c_void, arg2: *mut c_void, arg3: c_int)
                              -> c_long>;
pub type curl_chunk_end_callback =
    ::std::option::Option<extern "C" fn(arg1: *mut c_void) -> c_long>;
pub type curl_fnmatch_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: *c_char,
                               arg3: *c_char) -> c_int>;
pub type curl_seek_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: curl_off_t,
                               arg3: c_int) -> c_int>;
pub type curl_read_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_char, arg2: size_t, arg3: size_t,
                               arg4: *mut c_void) -> size_t>;
pub type curlsocktype = c_uint;
pub static CURLSOCKTYPE_IPCXN: c_uint = 0;
pub static CURLSOCKTYPE_ACCEPT: c_uint = 1;
pub static CURLSOCKTYPE_LAST: c_uint = 2;
pub type curl_sockopt_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: curl_socket_t,
                               arg3: curlsocktype) -> c_int>;
pub struct Struct_curl_sockaddr {
    pub family: c_int,
    pub socktype: c_int,
    pub protocol: c_int,
    pub addrlen: c_uint,
    pub addr: Struct_sockaddr,
}
pub type curl_opensocket_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: curlsocktype,
                               arg3: *mut Struct_curl_sockaddr)
                              -> curl_socket_t>;
pub type curl_closesocket_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: curl_socket_t)
                              -> c_int>;
pub type curlioerr = c_uint;
pub static CURLIOE_OK: c_uint = 0;
pub static CURLIOE_UNKNOWNCMD: c_uint = 1;
pub static CURLIOE_FAILRESTART: c_uint = 2;
pub static CURLIOE_LAST: c_uint = 3;
pub type curliocmd = c_uint;
pub static CURLIOCMD_NOP: c_uint = 0;
pub static CURLIOCMD_RESTARTREAD: c_uint = 1;
pub static CURLIOCMD_LAST: c_uint = 2;
pub type curl_ioctl_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut CURL, arg2: c_int,
                               arg3: *mut c_void) -> curlioerr>;
pub type curl_malloc_callback =
    ::std::option::Option<extern "C" fn(arg1: size_t) -> *mut c_void>;
pub type curl_free_callback =
    ::std::option::Option<extern "C" fn(arg1: *mut c_void)>;
pub type curl_realloc_callback =
    ::std::option::Option<extern "C" fn(arg1: *mut c_void, arg2: size_t)
                              -> *mut c_void>;
pub type curl_strdup_callback =
    ::std::option::Option<extern "C" fn(arg1: *c_char) -> *mut c_char>;
pub type curl_calloc_callback =
    ::std::option::Option<extern "C" fn(arg1: size_t, arg2: size_t)
                              -> *mut c_void>;
pub type curl_infotype = c_uint;
pub static CURLINFO_TEXT: c_uint = 0;
pub static CURLINFO_HEADER_IN: c_uint = 1;
pub static CURLINFO_HEADER_OUT: c_uint = 2;
pub static CURLINFO_DATA_IN: c_uint = 3;
pub static CURLINFO_DATA_OUT: c_uint = 4;
pub static CURLINFO_SSL_DATA_IN: c_uint = 5;
pub static CURLINFO_SSL_DATA_OUT: c_uint = 6;
pub static CURLINFO_END: c_uint = 7;
pub type curl_debug_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut CURL, arg2: curl_infotype,
                               arg3: *mut c_char, arg4: size_t,
                               arg5: *mut c_void) -> c_int>;
pub type CURLcode = c_uint;
pub static CURLE_OK: c_uint = 0;
pub static CURLE_UNSUPPORTED_PROTOCOL: c_uint = 1;
pub static CURLE_FAILED_INIT: c_uint = 2;
pub static CURLE_URL_MALFORMAT: c_uint = 3;
pub static CURLE_NOT_BUILT_IN: c_uint = 4;
pub static CURLE_COULDNT_RESOLVE_PROXY: c_uint = 5;
pub static CURLE_COULDNT_RESOLVE_HOST: c_uint = 6;
pub static CURLE_COULDNT_CONNECT: c_uint = 7;
pub static CURLE_FTP_WEIRD_SERVER_REPLY: c_uint = 8;
pub static CURLE_REMOTE_ACCESS_DENIED: c_uint = 9;
pub static CURLE_FTP_ACCEPT_FAILED: c_uint = 10;
pub static CURLE_FTP_WEIRD_PASS_REPLY: c_uint = 11;
pub static CURLE_FTP_ACCEPT_TIMEOUT: c_uint = 12;
pub static CURLE_FTP_WEIRD_PASV_REPLY: c_uint = 13;
pub static CURLE_FTP_WEIRD_227_FORMAT: c_uint = 14;
pub static CURLE_FTP_CANT_GET_HOST: c_uint = 15;
pub static CURLE_OBSOLETE16: c_uint = 16;
pub static CURLE_FTP_COULDNT_SET_TYPE: c_uint = 17;
pub static CURLE_PARTIAL_FILE: c_uint = 18;
pub static CURLE_FTP_COULDNT_RETR_FILE: c_uint = 19;
pub static CURLE_OBSOLETE20: c_uint = 20;
pub static CURLE_QUOTE_ERROR: c_uint = 21;
pub static CURLE_HTTP_RETURNED_ERROR: c_uint = 22;
pub static CURLE_WRITE_ERROR: c_uint = 23;
pub static CURLE_OBSOLETE24: c_uint = 24;
pub static CURLE_UPLOAD_FAILED: c_uint = 25;
pub static CURLE_READ_ERROR: c_uint = 26;
pub static CURLE_OUT_OF_MEMORY: c_uint = 27;
pub static CURLE_OPERATION_TIMEDOUT: c_uint = 28;
pub static CURLE_OBSOLETE29: c_uint = 29;
pub static CURLE_FTP_PORT_FAILED: c_uint = 30;
pub static CURLE_FTP_COULDNT_USE_REST: c_uint = 31;
pub static CURLE_OBSOLETE32: c_uint = 32;
pub static CURLE_RANGE_ERROR: c_uint = 33;
pub static CURLE_HTTP_POST_ERROR: c_uint = 34;
pub static CURLE_SSL_CONNECT_ERROR: c_uint = 35;
pub static CURLE_BAD_DOWNLOAD_RESUME: c_uint = 36;
pub static CURLE_FILE_COULDNT_READ_FILE: c_uint = 37;
pub static CURLE_LDAP_CANNOT_BIND: c_uint = 38;
pub static CURLE_LDAP_SEARCH_FAILED: c_uint = 39;
pub static CURLE_OBSOLETE40: c_uint = 40;
pub static CURLE_FUNCTION_NOT_FOUND: c_uint = 41;
pub static CURLE_ABORTED_BY_CALLBACK: c_uint = 42;
pub static CURLE_BAD_FUNCTION_ARGUMENT: c_uint = 43;
pub static CURLE_OBSOLETE44: c_uint = 44;
pub static CURLE_INTERFACE_FAILED: c_uint = 45;
pub static CURLE_OBSOLETE46: c_uint = 46;
pub static CURLE_TOO_MANY_REDIRECTS: c_uint = 47;
pub static CURLE_UNKNOWN_OPTION: c_uint = 48;
pub static CURLE_TELNET_OPTION_SYNTAX: c_uint = 49;
pub static CURLE_OBSOLETE50: c_uint = 50;
pub static CURLE_PEER_FAILED_VERIFICATION: c_uint = 51;
pub static CURLE_GOT_NOTHING: c_uint = 52;
pub static CURLE_SSL_ENGINE_NOTFOUND: c_uint = 53;
pub static CURLE_SSL_ENGINE_SETFAILED: c_uint = 54;
pub static CURLE_SEND_ERROR: c_uint = 55;
pub static CURLE_RECV_ERROR: c_uint = 56;
pub static CURLE_OBSOLETE57: c_uint = 57;
pub static CURLE_SSL_CERTPROBLEM: c_uint = 58;
pub static CURLE_SSL_CIPHER: c_uint = 59;
pub static CURLE_SSL_CACERT: c_uint = 60;
pub static CURLE_BAD_CONTENT_ENCODING: c_uint = 61;
pub static CURLE_LDAP_INVALID_URL: c_uint = 62;
pub static CURLE_FILESIZE_EXCEEDED: c_uint = 63;
pub static CURLE_USE_SSL_FAILED: c_uint = 64;
pub static CURLE_SEND_FAIL_REWIND: c_uint = 65;
pub static CURLE_SSL_ENGINE_INITFAILED: c_uint = 66;
pub static CURLE_LOGIN_DENIED: c_uint = 67;
pub static CURLE_TFTP_NOTFOUND: c_uint = 68;
pub static CURLE_TFTP_PERM: c_uint = 69;
pub static CURLE_REMOTE_DISK_FULL: c_uint = 70;
pub static CURLE_TFTP_ILLEGAL: c_uint = 71;
pub static CURLE_TFTP_UNKNOWNID: c_uint = 72;
pub static CURLE_REMOTE_FILE_EXISTS: c_uint = 73;
pub static CURLE_TFTP_NOSUCHUSER: c_uint = 74;
pub static CURLE_CONV_FAILED: c_uint = 75;
pub static CURLE_CONV_REQD: c_uint = 76;
pub static CURLE_SSL_CACERT_BADFILE: c_uint = 77;
pub static CURLE_REMOTE_FILE_NOT_FOUND: c_uint = 78;
pub static CURLE_SSH: c_uint = 79;
pub static CURLE_SSL_SHUTDOWN_FAILED: c_uint = 80;
pub static CURLE_AGAIN: c_uint = 81;
pub static CURLE_SSL_CRL_BADFILE: c_uint = 82;
pub static CURLE_SSL_ISSUER_ERROR: c_uint = 83;
pub static CURLE_FTP_PRET_FAILED: c_uint = 84;
pub static CURLE_RTSP_CSEQ_ERROR: c_uint = 85;
pub static CURLE_RTSP_SESSION_ERROR: c_uint = 86;
pub static CURLE_FTP_BAD_FILE_LIST: c_uint = 87;
pub static CURLE_CHUNK_FAILED: c_uint = 88;
pub static CURLE_NO_CONNECTION_AVAILABLE: c_uint = 89;
pub static CURL_LAST: c_uint = 90;
pub type curl_conv_callback =
    ::std::option::Option<extern "C" fn(arg1: *mut c_char, arg2: size_t)
                              -> CURLcode>;
pub type curl_ssl_ctx_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut CURL, arg2: *mut c_void,
                               arg3: *mut c_void) -> CURLcode>;
pub type curl_proxytype = c_uint;
pub static CURLPROXY_HTTP: c_uint = 0;
pub static CURLPROXY_HTTP_1_0: c_uint = 1;
pub static CURLPROXY_SOCKS4: c_uint = 4;
pub static CURLPROXY_SOCKS5: c_uint = 5;
pub static CURLPROXY_SOCKS4A: c_uint = 6;
pub static CURLPROXY_SOCKS5_HOSTNAME: c_uint = 7;
pub struct Struct_curl_khkey {
    pub key: *c_char,
    pub len: size_t,
    pub keytype: Enum_type,
}
pub type Enum_type = c_uint;
pub static CURLKHTYPE_UNKNOWN: c_uint = 0;
pub static CURLKHTYPE_RSA1: c_uint = 1;
pub static CURLKHTYPE_RSA: c_uint = 2;
pub static CURLKHTYPE_DSS: c_uint = 3;
pub type Enum_curl_khstat = c_uint;
pub static CURLKHSTAT_FINE_ADD_TO_FILE: c_uint = 0;
pub static CURLKHSTAT_FINE: c_uint = 1;
pub static CURLKHSTAT_REJECT: c_uint = 2;
pub static CURLKHSTAT_DEFER: c_uint = 3;
pub static CURLKHSTAT_LAST: c_uint = 4;
pub type Enum_curl_khmatch = c_uint;
pub static CURLKHMATCH_OK: c_uint = 0;
pub static CURLKHMATCH_MISMATCH: c_uint = 1;
pub static CURLKHMATCH_MISSING: c_uint = 2;
pub static CURLKHMATCH_LAST: c_uint = 3;
pub type curl_sshkeycallback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut CURL, arg2: *Struct_curl_khkey,
                               arg3: *Struct_curl_khkey,
                               arg4: Enum_curl_khmatch, arg5: *mut c_void)
                              -> c_int>;
pub type curl_usessl = c_uint;
pub static CURLUSESSL_NONE: c_uint = 0;
pub static CURLUSESSL_TRY: c_uint = 1;
pub static CURLUSESSL_CONTROL: c_uint = 2;
pub static CURLUSESSL_ALL: c_uint = 3;
pub static CURLUSESSL_LAST: c_uint = 4;
pub type curl_ftpccc = c_uint;
pub static CURLFTPSSL_CCC_NONE: c_uint = 0;
pub static CURLFTPSSL_CCC_PASSIVE: c_uint = 1;
pub static CURLFTPSSL_CCC_ACTIVE: c_uint = 2;
pub static CURLFTPSSL_CCC_LAST: c_uint = 3;
pub type curl_ftpauth = c_uint;
pub static CURLFTPAUTH_DEFAULT: c_uint = 0;
pub static CURLFTPAUTH_SSL: c_uint = 1;
pub static CURLFTPAUTH_TLS: c_uint = 2;
pub static CURLFTPAUTH_LAST: c_uint = 3;
pub type curl_ftpcreatedir = c_uint;
pub static CURLFTP_CREATE_DIR_NONE: c_uint = 0;
pub static CURLFTP_CREATE_DIR: c_uint = 1;
pub static CURLFTP_CREATE_DIR_RETRY: c_uint = 2;
pub static CURLFTP_CREATE_DIR_LAST: c_uint = 3;
pub type curl_ftpmethod = c_uint;
pub static CURLFTPMETHOD_DEFAULT: c_uint = 0;
pub static CURLFTPMETHOD_MULTICWD: c_uint = 1;
pub static CURLFTPMETHOD_NOCWD: c_uint = 2;
pub static CURLFTPMETHOD_SINGLECWD: c_uint = 3;
pub static CURLFTPMETHOD_LAST: c_uint = 4;
pub type CURLoption = c_uint;
pub static CURLOPT_FILE: c_uint = 10001;
pub static CURLOPT_WRITEDATA: c_uint = CURLOPT_FILE;
pub static CURLOPT_URL: c_uint = 10002;
pub static CURLOPT_PORT: c_uint = 3;
pub static CURLOPT_PROXY: c_uint = 10004;
pub static CURLOPT_USERPWD: c_uint = 10005;
pub static CURLOPT_PROXYUSERPWD: c_uint = 10006;
pub static CURLOPT_RANGE: c_uint = 10007;
pub static CURLOPT_INFILE: c_uint = 10009;
pub static CURLOPT_READDATA: c_uint = CURLOPT_INFILE;
pub static CURLOPT_ERRORBUFFER: c_uint = 10010;
pub static CURLOPT_WRITEFUNCTION: c_uint = 20011;
pub static CURLOPT_READFUNCTION: c_uint = 20012;
pub static CURLOPT_TIMEOUT: c_uint = 13;
pub static CURLOPT_INFILESIZE: c_uint = 14;
pub static CURLOPT_POSTFIELDS: c_uint = 10015;
pub static CURLOPT_REFERER: c_uint = 10016;
pub static CURLOPT_FTPPORT: c_uint = 10017;
pub static CURLOPT_USERAGENT: c_uint = 10018;
pub static CURLOPT_LOW_SPEED_LIMIT: c_uint = 19;
pub static CURLOPT_LOW_SPEED_TIME: c_uint = 20;
pub static CURLOPT_RESUME_FROM: c_uint = 21;
pub static CURLOPT_COOKIE: c_uint = 10022;
pub static CURLOPT_HTTPHEADER: c_uint = 10023;
pub static CURLOPT_RTSPHEAD: c_uint = CURLOPT_HTTPHEADER;
pub static CURLOPT_HTTPPOST: c_uint = 10024;
pub static CURLOPT_SSLCERT: c_uint = 10025;
pub static CURLOPT_KEYPASSWD: c_uint = 10026;
pub static CURLOPT_CRLF: c_uint = 27;
pub static CURLOPT_QUOTE: c_uint = 10028;
pub static CURLOPT_WRITEHEADER: c_uint = 10029;
pub static CURLOPT_HEADERDATA: c_uint = CURLOPT_WRITEHEADER;
pub static CURLOPT_COOKIEFILE: c_uint = 10031;
pub static CURLOPT_SSLVERSION: c_uint = 32;
pub static CURLOPT_TIMECONDITION: c_uint = 33;
pub static CURLOPT_TIMEVALUE: c_uint = 34;
pub static CURLOPT_CUSTOMREQUEST: c_uint = 10036;
pub static CURLOPT_STDERR: c_uint = 10037;
pub static CURLOPT_POSTQUOTE: c_uint = 10039;
pub static CURLOPT_WRITEINFO: c_uint = 10040;
pub static CURLOPT_VERBOSE: c_uint = 41;
pub static CURLOPT_HEADER: c_uint = 42;
pub static CURLOPT_NOPROGRESS: c_uint = 43;
pub static CURLOPT_NOBODY: c_uint = 44;
pub static CURLOPT_FAILONERROR: c_uint = 45;
pub static CURLOPT_UPLOAD: c_uint = 46;
pub static CURLOPT_POST: c_uint = 47;
pub static CURLOPT_DIRLISTONLY: c_uint = 48;
pub static CURLOPT_APPEND: c_uint = 50;
pub static CURLOPT_NETRC: c_uint = 51;
pub static CURLOPT_FOLLOWLOCATION: c_uint = 52;
pub static CURLOPT_TRANSFERTEXT: c_uint = 53;
pub static CURLOPT_PUT: c_uint = 54;
pub static CURLOPT_PROGRESSFUNCTION: c_uint = 20056;
pub static CURLOPT_PROGRESSDATA: c_uint = 10057;
pub static CURLOPT_AUTOREFERER: c_uint = 58;
pub static CURLOPT_PROXYPORT: c_uint = 59;
pub static CURLOPT_POSTFIELDSIZE: c_uint = 60;
pub static CURLOPT_HTTPPROXYTUNNEL: c_uint = 61;
pub static CURLOPT_INTERFACE: c_uint = 10062;
pub static CURLOPT_KRBLEVEL: c_uint = 10063;
pub static CURLOPT_SSL_VERIFYPEER: c_uint = 64;
pub static CURLOPT_CAINFO: c_uint = 10065;
pub static CURLOPT_MAXREDIRS: c_uint = 68;
pub static CURLOPT_FILETIME: c_uint = 69;
pub static CURLOPT_TELNETOPTIONS: c_uint = 10070;
pub static CURLOPT_MAXCONNECTS: c_uint = 71;
pub static CURLOPT_CLOSEPOLICY: c_uint = 72;
pub static CURLOPT_FRESH_CONNECT: c_uint = 74;
pub static CURLOPT_FORBID_REUSE: c_uint = 75;
pub static CURLOPT_RANDOM_FILE: c_uint = 10076;
pub static CURLOPT_EGDSOCKET: c_uint = 10077;
pub static CURLOPT_CONNECTTIMEOUT: c_uint = 78;
pub static CURLOPT_HEADERFUNCTION: c_uint = 20079;
pub static CURLOPT_HTTPGET: c_uint = 80;
pub static CURLOPT_SSL_VERIFYHOST: c_uint = 81;
pub static CURLOPT_COOKIEJAR: c_uint = 10082;
pub static CURLOPT_SSL_CIPHER_LIST: c_uint = 10083;
pub static CURLOPT_HTTP_VERSION: c_uint = 84;
pub static CURLOPT_FTP_USE_EPSV: c_uint = 85;
pub static CURLOPT_SSLCERTTYPE: c_uint = 10086;
pub static CURLOPT_SSLKEY: c_uint = 10087;
pub static CURLOPT_SSLKEYTYPE: c_uint = 10088;
pub static CURLOPT_SSLENGINE: c_uint = 10089;
pub static CURLOPT_SSLENGINE_DEFAULT: c_uint = 90;
pub static CURLOPT_DNS_USE_GLOBAL_CACHE: c_uint = 91;
pub static CURLOPT_DNS_CACHE_TIMEOUT: c_uint = 92;
pub static CURLOPT_PREQUOTE: c_uint = 10093;
pub static CURLOPT_DEBUGFUNCTION: c_uint = 20094;
pub static CURLOPT_DEBUGDATA: c_uint = 10095;
pub static CURLOPT_COOKIESESSION: c_uint = 96;
pub static CURLOPT_CAPATH: c_uint = 10097;
pub static CURLOPT_BUFFERSIZE: c_uint = 98;
pub static CURLOPT_NOSIGNAL: c_uint = 99;
pub static CURLOPT_SHARE: c_uint = 10100;
pub static CURLOPT_PROXYTYPE: c_uint = 101;
pub static CURLOPT_ACCEPT_ENCODING: c_uint = 10102;
pub static CURLOPT_PRIVATE: c_uint = 10103;
pub static CURLOPT_HTTP200ALIASES: c_uint = 10104;
pub static CURLOPT_UNRESTRICTED_AUTH: c_uint = 105;
pub static CURLOPT_FTP_USE_EPRT: c_uint = 106;
pub static CURLOPT_HTTPAUTH: c_uint = 107;
pub static CURLOPT_SSL_CTX_FUNCTION: c_uint = 20108;
pub static CURLOPT_SSL_CTX_DATA: c_uint = 10109;
pub static CURLOPT_FTP_CREATE_MISSING_DIRS: c_uint = 110;
pub static CURLOPT_PROXYAUTH: c_uint = 111;
pub static CURLOPT_FTP_RESPONSE_TIMEOUT: c_uint = 112;
pub static CURLOPT_IPRESOLVE: c_uint = 113;
pub static CURLOPT_MAXFILESIZE: c_uint = 114;
pub static CURLOPT_INFILESIZE_LARGE: c_uint = 30115;
pub static CURLOPT_RESUME_FROM_LARGE: c_uint = 30116;
pub static CURLOPT_MAXFILESIZE_LARGE: c_uint = 30117;
pub static CURLOPT_NETRC_FILE: c_uint = 10118;
pub static CURLOPT_USE_SSL: c_uint = 119;
pub static CURLOPT_POSTFIELDSIZE_LARGE: c_uint = 30120;
pub static CURLOPT_TCP_NODELAY: c_uint = 121;
pub static CURLOPT_FTPSSLAUTH: c_uint = 129;
pub static CURLOPT_IOCTLFUNCTION: c_uint = 20130;
pub static CURLOPT_IOCTLDATA: c_uint = 10131;
pub static CURLOPT_FTP_ACCOUNT: c_uint = 10134;
pub static CURLOPT_COOKIELIST: c_uint = 10135;
pub static CURLOPT_IGNORE_CONTENT_LENGTH: c_uint = 136;
pub static CURLOPT_FTP_SKIP_PASV_IP: c_uint = 137;
pub static CURLOPT_FTP_FILEMETHOD: c_uint = 138;
pub static CURLOPT_LOCALPORT: c_uint = 139;
pub static CURLOPT_LOCALPORTRANGE: c_uint = 140;
pub static CURLOPT_CONNECT_ONLY: c_uint = 141;
pub static CURLOPT_CONV_FROM_NETWORK_FUNCTION: c_uint = 20142;
pub static CURLOPT_CONV_TO_NETWORK_FUNCTION: c_uint = 20143;
pub static CURLOPT_CONV_FROM_UTF8_FUNCTION: c_uint = 20144;
pub static CURLOPT_MAX_SEND_SPEED_LARGE: c_uint = 30145;
pub static CURLOPT_MAX_RECV_SPEED_LARGE: c_uint = 30146;
pub static CURLOPT_FTP_ALTERNATIVE_TO_USER: c_uint = 10147;
pub static CURLOPT_SOCKOPTFUNCTION: c_uint = 20148;
pub static CURLOPT_SOCKOPTDATA: c_uint = 10149;
pub static CURLOPT_SSL_SESSIONID_CACHE: c_uint = 150;
pub static CURLOPT_SSH_AUTH_TYPES: c_uint = 151;
pub static CURLOPT_SSH_PUBLIC_KEYFILE: c_uint = 10152;
pub static CURLOPT_SSH_PRIVATE_KEYFILE: c_uint = 10153;
pub static CURLOPT_FTP_SSL_CCC: c_uint = 154;
pub static CURLOPT_TIMEOUT_MS: c_uint = 155;
pub static CURLOPT_CONNECTTIMEOUT_MS: c_uint = 156;
pub static CURLOPT_HTTP_TRANSFER_DECODING: c_uint = 157;
pub static CURLOPT_HTTP_CONTENT_DECODING: c_uint = 158;
pub static CURLOPT_NEW_FILE_PERMS: c_uint = 159;
pub static CURLOPT_NEW_DIRECTORY_PERMS: c_uint = 160;
pub static CURLOPT_POSTREDIR: c_uint = 161;
pub static CURLOPT_SSH_HOST_PUBLIC_KEY_MD5: c_uint = 10162;
pub static CURLOPT_OPENSOCKETFUNCTION: c_uint = 20163;
pub static CURLOPT_OPENSOCKETDATA: c_uint = 10164;
pub static CURLOPT_COPYPOSTFIELDS: c_uint = 10165;
pub static CURLOPT_PROXY_TRANSFER_MODE: c_uint = 166;
pub static CURLOPT_SEEKFUNCTION: c_uint = 20167;
pub static CURLOPT_SEEKDATA: c_uint = 10168;
pub static CURLOPT_CRLFILE: c_uint = 10169;
pub static CURLOPT_ISSUERCERT: c_uint = 10170;
pub static CURLOPT_ADDRESS_SCOPE: c_uint = 171;
pub static CURLOPT_CERTINFO: c_uint = 172;
pub static CURLOPT_USERNAME: c_uint = 10173;
pub static CURLOPT_PASSWORD: c_uint = 10174;
pub static CURLOPT_PROXYUSERNAME: c_uint = 10175;
pub static CURLOPT_PROXYPASSWORD: c_uint = 10176;
pub static CURLOPT_NOPROXY: c_uint = 10177;
pub static CURLOPT_TFTP_BLKSIZE: c_uint = 178;
pub static CURLOPT_SOCKS5_GSSAPI_SERVICE: c_uint = 10179;
pub static CURLOPT_SOCKS5_GSSAPI_NEC: c_uint = 180;
pub static CURLOPT_PROTOCOLS: c_uint = 181;
pub static CURLOPT_REDIR_PROTOCOLS: c_uint = 182;
pub static CURLOPT_SSH_KNOWNHOSTS: c_uint = 10183;
pub static CURLOPT_SSH_KEYFUNCTION: c_uint = 20184;
pub static CURLOPT_SSH_KEYDATA: c_uint = 10185;
pub static CURLOPT_MAIL_FROM: c_uint = 10186;
pub static CURLOPT_MAIL_RCPT: c_uint = 10187;
pub static CURLOPT_FTP_USE_PRET: c_uint = 188;
pub static CURLOPT_RTSP_REQUEST: c_uint = 189;
pub static CURLOPT_RTSP_SESSION_ID: c_uint = 10190;
pub static CURLOPT_RTSP_STREAM_URI: c_uint = 10191;
pub static CURLOPT_RTSP_TRANSPORT: c_uint = 10192;
pub static CURLOPT_RTSP_CLIENT_CSEQ: c_uint = 193;
pub static CURLOPT_RTSP_SERVER_CSEQ: c_uint = 194;
pub static CURLOPT_INTERLEAVEDATA: c_uint = 10195;
pub static CURLOPT_INTERLEAVEFUNCTION: c_uint = 20196;
pub static CURLOPT_WILDCARDMATCH: c_uint = 197;
pub static CURLOPT_CHUNK_BGN_FUNCTION: c_uint = 20198;
pub static CURLOPT_CHUNK_END_FUNCTION: c_uint = 20199;
pub static CURLOPT_FNMATCH_FUNCTION: c_uint = 20200;
pub static CURLOPT_CHUNK_DATA: c_uint = 10201;
pub static CURLOPT_FNMATCH_DATA: c_uint = 10202;
pub static CURLOPT_RESOLVE: c_uint = 10203;
pub static CURLOPT_TLSAUTH_USERNAME: c_uint = 10204;
pub static CURLOPT_TLSAUTH_PASSWORD: c_uint = 10205;
pub static CURLOPT_TLSAUTH_TYPE: c_uint = 10206;
pub static CURLOPT_TRANSFER_ENCODING: c_uint = 207;
pub static CURLOPT_CLOSESOCKETFUNCTION: c_uint = 20208;
pub static CURLOPT_CLOSESOCKETDATA: c_uint = 10209;
pub static CURLOPT_GSSAPI_DELEGATION: c_uint = 210;
pub static CURLOPT_DNS_SERVERS: c_uint = 10211;
pub static CURLOPT_ACCEPTTIMEOUT_MS: c_uint = 212;
pub static CURLOPT_TCP_KEEPALIVE: c_uint = 213;
pub static CURLOPT_TCP_KEEPIDLE: c_uint = 214;
pub static CURLOPT_TCP_KEEPINTVL: c_uint = 215;
pub static CURLOPT_SSL_OPTIONS: c_uint = 216;
pub static CURLOPT_MAIL_AUTH: c_uint = 10217;
pub static CURLOPT_SASL_IR: c_uint = 218;
pub static CURLOPT_XFERINFOFUNCTION: c_uint = 20219;
pub static CURLOPT_LASTENTRY: c_uint = 20220;
pub type Enum_Unnamed8 = c_uint;
pub static CURL_HTTP_VERSION_NONE: c_uint = 0;
pub static CURL_HTTP_VERSION_1_0: c_uint = 1;
pub static CURL_HTTP_VERSION_1_1: c_uint = 2;
pub static CURL_HTTP_VERSION_LAST: c_uint = 3;
pub type Enum_Unnamed9 = c_uint;
pub static CURL_RTSPREQ_NONE: c_uint = 0;
pub static CURL_RTSPREQ_OPTIONS: c_uint = 1;
pub static CURL_RTSPREQ_DESCRIBE: c_uint = 2;
pub static CURL_RTSPREQ_ANNOUNCE: c_uint = 3;
pub static CURL_RTSPREQ_SETUP: c_uint = 4;
pub static CURL_RTSPREQ_PLAY: c_uint = 5;
pub static CURL_RTSPREQ_PAUSE: c_uint = 6;
pub static CURL_RTSPREQ_TEARDOWN: c_uint = 7;
pub static CURL_RTSPREQ_GET_PARAMETER: c_uint = 8;
pub static CURL_RTSPREQ_SET_PARAMETER: c_uint = 9;
pub static CURL_RTSPREQ_RECORD: c_uint = 10;
pub static CURL_RTSPREQ_RECEIVE: c_uint = 11;
pub static CURL_RTSPREQ_LAST: c_uint = 12;
pub type Enum_CURL_NETRC_OPTION = c_uint;
pub static CURL_NETRC_IGNORED: c_uint = 0;
pub static CURL_NETRC_OPTIONAL: c_uint = 1;
pub static CURL_NETRC_REQUIRED: c_uint = 2;
pub static CURL_NETRC_LAST: c_uint = 3;
pub type Enum_Unnamed10 = c_uint;
pub static CURL_SSLVERSION_DEFAULT: c_uint = 0;
pub static CURL_SSLVERSION_TLSv1: c_uint = 1;
pub static CURL_SSLVERSION_SSLv2: c_uint = 2;
pub static CURL_SSLVERSION_SSLv3: c_uint = 3;
pub static CURL_SSLVERSION_LAST: c_uint = 4;
pub type Enum_CURL_TLSAUTH = c_uint;
pub static CURL_TLSAUTH_NONE: c_uint = 0;
pub static CURL_TLSAUTH_SRP: c_uint = 1;
pub static CURL_TLSAUTH_LAST: c_uint = 2;
pub type curl_TimeCond = c_uint;
pub static CURL_TIMECOND_NONE: c_uint = 0;
pub static CURL_TIMECOND_IFMODSINCE: c_uint = 1;
pub static CURL_TIMECOND_IFUNMODSINCE: c_uint = 2;
pub static CURL_TIMECOND_LASTMOD: c_uint = 3;
pub static CURL_TIMECOND_LAST: c_uint = 4;
pub type CURLformoption = c_uint;
pub static CURLFORM_NOTHING: c_uint = 0;
pub static CURLFORM_COPYNAME: c_uint = 1;
pub static CURLFORM_PTRNAME: c_uint = 2;
pub static CURLFORM_NAMELENGTH: c_uint = 3;
pub static CURLFORM_COPYCONTENTS: c_uint = 4;
pub static CURLFORM_PTRCONTENTS: c_uint = 5;
pub static CURLFORM_CONTENTSLENGTH: c_uint = 6;
pub static CURLFORM_FILECONTENT: c_uint = 7;
pub static CURLFORM_ARRAY: c_uint = 8;
pub static CURLFORM_OBSOLETE: c_uint = 9;
pub static CURLFORM_FILE: c_uint = 10;
pub static CURLFORM_BUFFER: c_uint = 11;
pub static CURLFORM_BUFFERPTR: c_uint = 12;
pub static CURLFORM_BUFFERLENGTH: c_uint = 13;
pub static CURLFORM_CONTENTTYPE: c_uint = 14;
pub static CURLFORM_CONTENTHEADER: c_uint = 15;
pub static CURLFORM_FILENAME: c_uint = 16;
pub static CURLFORM_END: c_uint = 17;
pub static CURLFORM_OBSOLETE2: c_uint = 18;
pub static CURLFORM_STREAM: c_uint = 19;
pub static CURLFORM_LASTENTRY: c_uint = 20;
pub struct Struct_curl_forms {
    pub option: CURLformoption,
    pub value: *c_char,
}
pub type CURLFORMcode = c_uint;
pub static CURL_FORMADD_OK: c_uint = 0;
pub static CURL_FORMADD_MEMORY: c_uint = 1;
pub static CURL_FORMADD_OPTION_TWICE: c_uint = 2;
pub static CURL_FORMADD_NULL: c_uint = 3;
pub static CURL_FORMADD_UNKNOWN_OPTION: c_uint = 4;
pub static CURL_FORMADD_INCOMPLETE: c_uint = 5;
pub static CURL_FORMADD_ILLEGAL_ARRAY: c_uint = 6;
pub static CURL_FORMADD_DISABLED: c_uint = 7;
pub static CURL_FORMADD_LAST: c_uint = 8;
pub type curl_formget_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: *c_char, arg3: size_t)
                              -> size_t>;
pub struct Struct_curl_slist {
    pub data: *mut c_char,
    pub next: *mut Struct_curl_slist,
}
pub struct Struct_curl_certinfo {
    pub num_of_certs: c_int,
    pub certinfo: *mut *mut Struct_curl_slist,
}
pub type CURLINFO = c_uint;
pub static CURLINFO_NONE: c_uint = 0;
pub static CURLINFO_EFFECTIVE_URL: c_uint = 1048577;
pub static CURLINFO_RESPONSE_CODE: c_uint = 2097154;
pub static CURLINFO_TOTAL_TIME: c_uint = 3145731;
pub static CURLINFO_NAMELOOKUP_TIME: c_uint = 3145732;
pub static CURLINFO_CONNECT_TIME: c_uint = 3145733;
pub static CURLINFO_PRETRANSFER_TIME: c_uint = 3145734;
pub static CURLINFO_SIZE_UPLOAD: c_uint = 3145735;
pub static CURLINFO_SIZE_DOWNLOAD: c_uint = 3145736;
pub static CURLINFO_SPEED_DOWNLOAD: c_uint = 3145737;
pub static CURLINFO_SPEED_UPLOAD: c_uint = 3145738;
pub static CURLINFO_HEADER_SIZE: c_uint = 2097163;
pub static CURLINFO_REQUEST_SIZE: c_uint = 2097164;
pub static CURLINFO_SSL_VERIFYRESULT: c_uint = 2097165;
pub static CURLINFO_FILETIME: c_uint = 2097166;
pub static CURLINFO_CONTENT_LENGTH_DOWNLOAD: c_uint = 3145743;
pub static CURLINFO_CONTENT_LENGTH_UPLOAD: c_uint = 3145744;
pub static CURLINFO_STARTTRANSFER_TIME: c_uint = 3145745;
pub static CURLINFO_CONTENT_TYPE: c_uint = 1048594;
pub static CURLINFO_REDIRECT_TIME: c_uint = 3145747;
pub static CURLINFO_REDIRECT_COUNT: c_uint = 2097172;
pub static CURLINFO_PRIVATE: c_uint = 1048597;
pub static CURLINFO_HTTP_CONNECTCODE: c_uint = 2097174;
pub static CURLINFO_HTTPAUTH_AVAIL: c_uint = 2097175;
pub static CURLINFO_PROXYAUTH_AVAIL: c_uint = 2097176;
pub static CURLINFO_OS_ERRNO: c_uint = 2097177;
pub static CURLINFO_NUM_CONNECTS: c_uint = 2097178;
pub static CURLINFO_SSL_ENGINES: c_uint = 4194331;
pub static CURLINFO_COOKIELIST: c_uint = 4194332;
pub static CURLINFO_LASTSOCKET: c_uint = 2097181;
pub static CURLINFO_FTP_ENTRY_PATH: c_uint = 1048606;
pub static CURLINFO_REDIRECT_URL: c_uint = 1048607;
pub static CURLINFO_PRIMARY_IP: c_uint = 1048608;
pub static CURLINFO_APPCONNECT_TIME: c_uint = 3145761;
pub static CURLINFO_CERTINFO: c_uint = 4194338;
pub static CURLINFO_CONDITION_UNMET: c_uint = 2097187;
pub static CURLINFO_RTSP_SESSION_ID: c_uint = 1048612;
pub static CURLINFO_RTSP_CLIENT_CSEQ: c_uint = 2097189;
pub static CURLINFO_RTSP_SERVER_CSEQ: c_uint = 2097190;
pub static CURLINFO_RTSP_CSEQ_RECV: c_uint = 2097191;
pub static CURLINFO_PRIMARY_PORT: c_uint = 2097192;
pub static CURLINFO_LOCAL_IP: c_uint = 1048617;
pub static CURLINFO_LOCAL_PORT: c_uint = 2097194;
pub static CURLINFO_LASTONE: c_uint = 42;
pub type curl_closepolicy = c_uint;
pub static CURLCLOSEPOLICY_NONE: c_uint = 0;
pub static CURLCLOSEPOLICY_OLDEST: c_uint = 1;
pub static CURLCLOSEPOLICY_LEAST_RECENTLY_USED: c_uint = 2;
pub static CURLCLOSEPOLICY_LEAST_TRAFFIC: c_uint = 3;
pub static CURLCLOSEPOLICY_SLOWEST: c_uint = 4;
pub static CURLCLOSEPOLICY_CALLBACK: c_uint = 5;
pub static CURLCLOSEPOLICY_LAST: c_uint = 6;
pub type curl_lock_data = c_uint;
pub static CURL_LOCK_DATA_NONE: c_uint = 0;
pub static CURL_LOCK_DATA_SHARE: c_uint = 1;
pub static CURL_LOCK_DATA_COOKIE: c_uint = 2;
pub static CURL_LOCK_DATA_DNS: c_uint = 3;
pub static CURL_LOCK_DATA_SSL_SESSION: c_uint = 4;
pub static CURL_LOCK_DATA_CONNECT: c_uint = 5;
pub static CURL_LOCK_DATA_LAST: c_uint = 6;
pub type curl_lock_access = c_uint;
pub static CURL_LOCK_ACCESS_NONE: c_uint = 0;
pub static CURL_LOCK_ACCESS_SHARED: c_uint = 1;
pub static CURL_LOCK_ACCESS_SINGLE: c_uint = 2;
pub static CURL_LOCK_ACCESS_LAST: c_uint = 3;
pub type curl_lock_function =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut CURL, arg2: curl_lock_data,
                               arg3: curl_lock_access, arg4: *mut c_void)>;
pub type curl_unlock_function =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut CURL, arg2: curl_lock_data,
                               arg3: *mut c_void)>;
pub type CURLSH = c_void;
pub type CURLSHcode = c_uint;
pub static CURLSHE_OK: c_uint = 0;
pub static CURLSHE_BAD_OPTION: c_uint = 1;
pub static CURLSHE_IN_USE: c_uint = 2;
pub static CURLSHE_INVALID: c_uint = 3;
pub static CURLSHE_NOMEM: c_uint = 4;
pub static CURLSHE_NOT_BUILT_IN: c_uint = 5;
pub static CURLSHE_LAST: c_uint = 6;
pub type CURLSHoption = c_uint;
pub static CURLSHOPT_NONE: c_uint = 0;
pub static CURLSHOPT_SHARE: c_uint = 1;
pub static CURLSHOPT_UNSHARE: c_uint = 2;
pub static CURLSHOPT_LOCKFUNC: c_uint = 3;
pub static CURLSHOPT_UNLOCKFUNC: c_uint = 4;
pub static CURLSHOPT_USERDATA: c_uint = 5;
pub static CURLSHOPT_LAST: c_uint = 6;
pub type CURLversion = c_uint;
pub static CURLVERSION_FIRST: c_uint = 0;
pub static CURLVERSION_SECOND: c_uint = 1;
pub static CURLVERSION_THIRD: c_uint = 2;
pub static CURLVERSION_FOURTH: c_uint = 3;
pub static CURLVERSION_LAST: c_uint = 4;
pub struct curl_version_info_data {
    pub age: CURLversion,
    pub version: *c_char,
    pub version_num: c_uint,
    pub host: *c_char,
    pub features: c_int,
    pub ssl_version: *c_char,
    pub ssl_version_num: c_long,
    pub libz_version: *c_char,
    pub protocols: **c_char,
    pub ares: *c_char,
    pub ares_num: c_int,
    pub libidn: *c_char,
    pub iconv_ver_num: c_int,
    pub libssh_version: *c_char,
}
pub type CURLM = c_void;
pub type CURLMcode = c_int;
pub static CURLM_CALL_MULTI_PERFORM: c_int = -1;
pub static CURLM_OK: c_int = 0;
pub static CURLM_BAD_HANDLE: c_int = 1;
pub static CURLM_BAD_EASY_HANDLE: c_int = 2;
pub static CURLM_OUT_OF_MEMORY: c_int = 3;
pub static CURLM_INTERNAL_ERROR: c_int = 4;
pub static CURLM_BAD_SOCKET: c_int = 5;
pub static CURLM_UNKNOWN_OPTION: c_int = 6;
pub static CURLM_LAST: c_int = 7;
pub type CURLMSG = c_uint;
pub static CURLMSG_NONE: c_uint = 0;
pub static CURLMSG_DONE: c_uint = 1;
pub static CURLMSG_LAST: c_uint = 2;
pub struct Struct_CURLMsg {
    pub msg: CURLMSG,
    pub easy_handle: *mut CURL,
    pub data: Union_Unnamed11,
}
pub struct Union_Unnamed11 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed11 {
    pub fn whatever(&mut self) -> *mut *mut c_void {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn result(&mut self) -> *mut CURLcode {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type CURLMsg = Struct_CURLMsg;
pub struct Struct_curl_waitfd {
    pub fd: curl_socket_t,
    pub events: c_short,
    pub revents: c_short,
}
pub type curl_socket_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut CURL, arg2: curl_socket_t,
                               arg3: c_int, arg4: *mut c_void,
                               arg5: *mut c_void) -> c_int>;
pub type curl_multi_timer_callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut CURLM, arg2: c_long,
                               arg3: *mut c_void) -> c_int>;
pub type CURLMoption = c_uint;
pub static CURLMOPT_SOCKETFUNCTION: c_uint = 20001;
pub static CURLMOPT_SOCKETDATA: c_uint = 10002;
pub static CURLMOPT_PIPELINING: c_uint = 3;
pub static CURLMOPT_TIMERFUNCTION: c_uint = 20004;
pub static CURLMOPT_TIMERDATA: c_uint = 10005;
pub static CURLMOPT_MAXCONNECTS: c_uint = 6;
pub static CURLMOPT_MAX_HOST_CONNECTIONS: c_uint = 7;
pub static CURLMOPT_MAX_PIPELINE_LENGTH: c_uint = 8;
pub static CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE: c_uint = 30009;
pub static CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE: c_uint = 30010;
pub static CURLMOPT_PIPELINING_SITE_BL: c_uint = 10011;
pub static CURLMOPT_PIPELINING_SERVER_BL: c_uint = 10012;
pub static CURLMOPT_MAX_TOTAL_CONNECTIONS: c_uint = 13;
pub static CURLMOPT_LASTENTRY: c_uint = 14;
pub type __va_list_tag = Struct___va_list_tag;
pub struct Struct___va_list_tag {
    pub gp_offset: c_uint,
    pub fp_offset: c_uint,
    pub overflow_arg_area: *mut c_void,
    pub reg_save_area: *mut c_void,
}
#[link(name = "curl")]
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: c_int;
    pub static mut sys_errlist: c_void;
    pub static mut __tzname: [*mut c_char, ..2u];
    pub static mut __daylight: c_int;
    pub static mut __timezone: c_long;
    pub static mut tzname: [*mut c_char, ..2u];
    pub static mut daylight: c_int;
    pub static mut timezone: c_long;
    pub fn select(__nfds: c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> c_int;
    pub fn pselect(__nfds: c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *Struct_timespec, __sigmask: *__sigset_t) ->
     c_int;
    pub fn gnu_dev_major(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_minor(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_makedev(__major: c_uint, __minor: c_uint) -> c_ulonglong;
    pub fn readv(__fd: c_int, __iovec: *Struct_iovec, __count: c_int) ->
     ssize_t;
    pub fn writev(__fd: c_int, __iovec: *Struct_iovec, __count: c_int) ->
     ssize_t;
    pub fn preadv(__fd: c_int, __iovec: *Struct_iovec, __count: c_int,
                  __offset: __off_t) -> ssize_t;
    pub fn pwritev(__fd: c_int, __iovec: *Struct_iovec, __count: c_int,
                   __offset: __off_t) -> ssize_t;
    pub fn __cmsg_nxthdr(__mhdr: *mut Struct_msghdr,
                         __cmsg: *mut Struct_cmsghdr) -> *mut Struct_cmsghdr;
    pub fn socket(__domain: c_int, __type: c_int, __protocol: c_int) -> c_int;
    pub fn socketpair(__domain: c_int, __type: c_int, __protocol: c_int,
                      __fds: [c_int, ..2u]) -> c_int;
    pub fn bind(__fd: c_int, __addr: *Struct_sockaddr, __len: socklen_t) ->
     c_int;
    pub fn getsockname(__fd: c_int, __addr: *mut Struct_sockaddr,
                       __len: *mut socklen_t) -> c_int;
    pub fn connect(__fd: c_int, __addr: *Struct_sockaddr, __len: socklen_t) ->
     c_int;
    pub fn getpeername(__fd: c_int, __addr: *mut Struct_sockaddr,
                       __len: *mut socklen_t) -> c_int;
    pub fn send(__fd: c_int, __buf: *c_void, __n: size_t, __flags: c_int) ->
     ssize_t;
    pub fn recv(__fd: c_int, __buf: *mut c_void, __n: size_t, __flags: c_int)
     -> ssize_t;
    pub fn sendto(__fd: c_int, __buf: *c_void, __n: size_t, __flags: c_int,
                  __addr: *Struct_sockaddr, __addr_len: socklen_t) -> ssize_t;
    pub fn recvfrom(__fd: c_int, __buf: *mut c_void, __n: size_t,
                    __flags: c_int, __addr: *mut Struct_sockaddr,
                    __addr_len: *mut socklen_t) -> ssize_t;
    pub fn sendmsg(__fd: c_int, __message: *Struct_msghdr, __flags: c_int) ->
     ssize_t;
    pub fn recvmsg(__fd: c_int, __message: *mut Struct_msghdr, __flags: c_int)
     -> ssize_t;
    pub fn getsockopt(__fd: c_int, __level: c_int, __optname: c_int,
                      __optval: *mut c_void, __optlen: *mut socklen_t) ->
     c_int;
    pub fn setsockopt(__fd: c_int, __level: c_int, __optname: c_int,
                      __optval: *c_void, __optlen: socklen_t) -> c_int;
    pub fn listen(__fd: c_int, __n: c_int) -> c_int;
    pub fn accept(__fd: c_int, __addr: *mut Struct_sockaddr,
                  __addr_len: *mut socklen_t) -> c_int;
    pub fn shutdown(__fd: c_int, __how: c_int) -> c_int;
    pub fn sockatmark(__fd: c_int) -> c_int;
    pub fn isfdtype(__fd: c_int, __fdtype: c_int) -> c_int;
    pub fn __underflow(arg1: *mut _IO_FILE) -> c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: c_int) -> c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_putc(__c: c_int, __fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *c_char,
                       arg3: __gnuc_va_list, arg4: *mut c_int) -> c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *c_char,
                        arg3: __gnuc_va_list) -> c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: c_int, arg3: __ssize_t) ->
     __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut c_void, arg3: size_t) ->
     size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t, arg3: c_int,
                       arg4: c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t, arg3: c_int) ->
     __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *c_char) -> c_int;
    pub fn rename(__old: *c_char, __new: *c_char) -> c_int;
    pub fn renameat(__oldfd: c_int, __old: *c_char, __newfd: c_int,
                    __new: *c_char) -> c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut c_char) -> *mut c_char;
    pub fn tmpnam_r(__s: *mut c_char) -> *mut c_char;
    pub fn tempnam(__dir: *c_char, __pfx: *c_char) -> *mut c_char;
    pub fn fclose(__stream: *mut FILE) -> c_int;
    pub fn fflush(__stream: *mut FILE) -> c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> c_int;
    pub fn fopen(__filename: *c_char, __modes: *c_char) -> *mut FILE;
    pub fn freopen(__filename: *c_char, __modes: *c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: c_int, __modes: *c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut c_void, __len: size_t, __modes: *c_char) ->
     *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut c_char, __sizeloc: *mut size_t)
     -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut c_char, __modes: c_int,
                   __n: size_t) -> c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut c_char, __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE, __format: *c_char, ...) -> c_int;
    pub fn printf(__format: *c_char, ...) -> c_int;
    pub fn sprintf(__s: *mut c_char, __format: *c_char, ...) -> c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *c_char, __arg: __gnuc_va_list)
     -> c_int;
    pub fn vprintf(__format: *c_char, __arg: __gnuc_va_list) -> c_int;
    pub fn vsprintf(__s: *mut c_char, __format: *c_char,
                    __arg: __gnuc_va_list) -> c_int;
    pub fn snprintf(__s: *mut c_char, __maxlen: size_t,
                    __format: *c_char, ...) -> c_int;
    pub fn vsnprintf(__s: *mut c_char, __maxlen: size_t, __format: *c_char,
                     __arg: __gnuc_va_list) -> c_int;
    pub fn vdprintf(__fd: c_int, __fmt: *c_char, __arg: __gnuc_va_list) ->
     c_int;
    pub fn dprintf(__fd: c_int, __fmt: *c_char, ...) -> c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *c_char, ...) -> c_int;
    pub fn scanf(__format: *c_char, ...) -> c_int;
    pub fn sscanf(__s: *c_char, __format: *c_char, ...) -> c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *c_char, __arg: __gnuc_va_list)
     -> c_int;
    pub fn vscanf(__format: *c_char, __arg: __gnuc_va_list) -> c_int;
    pub fn vsscanf(__s: *c_char, __format: *c_char, __arg: __gnuc_va_list) ->
     c_int;
    pub fn fgetc(__stream: *mut FILE) -> c_int;
    pub fn getc(__stream: *mut FILE) -> c_int;
    pub fn getchar() -> c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> c_int;
    pub fn getchar_unlocked() -> c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> c_int;
    pub fn fputc(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putc(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putchar(__c: c_int) -> c_int;
    pub fn fputc_unlocked(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putc_unlocked(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putchar_unlocked(__c: c_int) -> c_int;
    pub fn getw(__stream: *mut FILE) -> c_int;
    pub fn putw(__w: c_int, __stream: *mut FILE) -> c_int;
    pub fn fgets(__s: *mut c_char, __n: c_int, __stream: *mut FILE) ->
     *mut c_char;
    pub fn gets(__s: *mut c_char) -> *mut c_char;
    pub fn __getdelim(__lineptr: *mut *mut c_char, __n: *mut size_t,
                      __delimiter: c_int, __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut c_char, __n: *mut size_t,
                    __delimiter: c_int, __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *c_char, __stream: *mut FILE) -> c_int;
    pub fn puts(__s: *c_char) -> c_int;
    pub fn ungetc(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn fread(__ptr: *mut c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *c_void, __size: size_t, __n: size_t, __s: *mut FILE)
     -> size_t;
    pub fn fread_unlocked(__ptr: *mut c_void, __size: size_t, __n: size_t,
                          __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *c_void, __size: size_t, __n: size_t,
                           __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: c_long, __whence: c_int) ->
     c_int;
    pub fn ftell(__stream: *mut FILE) -> c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: c_int) ->
     c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *fpos_t) -> c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> c_int;
    pub fn ferror(__stream: *mut FILE) -> c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> c_int;
    pub fn perror(__s: *c_char);
    pub fn fileno(__stream: *mut FILE) -> c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> c_int;
    pub fn popen(__command: *c_char, __modes: *c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> c_int;
    pub fn ctermid(__s: *mut c_char) -> *mut c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut c_char, __maxsize: size_t, __format: *c_char,
                    __tp: *Struct_tm) -> size_t;
    pub fn strftime_l(__s: *mut c_char, __maxsize: size_t, __format: *c_char,
                      __tp: *Struct_tm, __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *time_t, __tp: *mut Struct_tm) -> *mut Struct_tm;
    pub fn localtime_r(__timer: *time_t, __tp: *mut Struct_tm) ->
     *mut Struct_tm;
    pub fn asctime(__tp: *Struct_tm) -> *mut c_char;
    pub fn ctime(__timer: *time_t) -> *mut c_char;
    pub fn asctime_r(__tp: *Struct_tm, __buf: *mut c_char) -> *mut c_char;
    pub fn ctime_r(__timer: *time_t, __buf: *mut c_char) -> *mut c_char;
    pub fn tzset();
    pub fn stime(__when: *time_t) -> c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: c_int) -> c_int;
    pub fn nanosleep(__requested_time: *Struct_timespec,
                     __remaining: *mut Struct_timespec) -> c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec) ->
     c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec) ->
     c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *Struct_timespec) ->
     c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: c_int,
                           __req: *Struct_timespec,
                           __rem: *mut Struct_timespec) -> c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) ->
     c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> c_int;
    pub fn timer_delete(__timerid: timer_t) -> c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: c_int,
                         __value: *Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> c_int;
    pub fn gettimeofday(__tv: *mut Struct_timeval, __tz: __timezone_ptr_t) ->
     c_int;
    pub fn settimeofday(__tv: *Struct_timeval, __tz: *Struct_timezone) ->
     c_int;
    pub fn adjtime(__delta: *Struct_timeval, __olddelta: *mut Struct_timeval)
     -> c_int;
    pub fn getitimer(__which: __itimer_which_t,
                     __value: *mut Struct_itimerval) -> c_int;
    pub fn setitimer(__which: __itimer_which_t, __new: *Struct_itimerval,
                     __old: *mut Struct_itimerval) -> c_int;
    pub fn utimes(__file: *c_char, __tvp: [Struct_timeval, ..2u]) -> c_int;
    pub fn lutimes(__file: *c_char, __tvp: [Struct_timeval, ..2u]) -> c_int;
    pub fn futimes(__fd: c_int, __tvp: [Struct_timeval, ..2u]) -> c_int;
    pub fn curl_strequal(s1: *c_char, s2: *c_char) -> c_int;
    pub fn curl_strnequal(s1: *c_char, s2: *c_char, n: size_t) -> c_int;
    pub fn curl_formadd(httppost: *mut *mut Struct_curl_httppost,
                        last_post: *mut *mut Struct_curl_httppost, ...) ->
     CURLFORMcode;
    pub fn curl_formget(form: *mut Struct_curl_httppost, arg: *mut c_void,
                        append: curl_formget_callback) -> c_int;
    pub fn curl_formfree(form: *mut Struct_curl_httppost);
    pub fn curl_getenv(variable: *c_char) -> *mut c_char;
    pub fn curl_version() -> *mut c_char;
    pub fn curl_easy_escape(handle: *mut CURL, string: *c_char, length: c_int)
     -> *mut c_char;
    pub fn curl_escape(string: *c_char, length: c_int) -> *mut c_char;
    pub fn curl_easy_unescape(handle: *mut CURL, string: *c_char,
                              length: c_int, outlength: *mut c_int) ->
     *mut c_char;
    pub fn curl_unescape(string: *c_char, length: c_int) -> *mut c_char;
    pub fn curl_free(p: *mut c_void);
    pub fn curl_global_init(flags: c_long) -> CURLcode;
    pub fn curl_global_init_mem(flags: c_long, m: curl_malloc_callback,
                                f: curl_free_callback,
                                r: curl_realloc_callback,
                                s: curl_strdup_callback,
                                c: curl_calloc_callback) -> CURLcode;
    pub fn curl_global_cleanup();
    pub fn curl_slist_append(arg1: *mut Struct_curl_slist, arg2: *c_char) ->
     *mut Struct_curl_slist;
    pub fn curl_slist_free_all(arg1: *mut Struct_curl_slist);
    pub fn curl_getdate(p: *c_char, unused: *time_t) -> time_t;
    pub fn curl_share_init() -> *mut CURLSH;
    pub fn curl_share_setopt(arg1: *mut CURLSH, option: CURLSHoption, ...) ->
     CURLSHcode;
    pub fn curl_share_cleanup(arg1: *mut CURLSH) -> CURLSHcode;
    pub fn curl_version_info(arg1: CURLversion) ->
     *mut curl_version_info_data;
    pub fn curl_easy_strerror(arg1: CURLcode) -> *c_char;
    pub fn curl_share_strerror(arg1: CURLSHcode) -> *c_char;
    pub fn curl_easy_pause(handle: *mut CURL, bitmask: c_int) -> CURLcode;
    pub fn curl_easy_init() -> *mut CURL;
    pub fn curl_easy_setopt(curl: *mut CURL, option: CURLoption, ...) ->
     CURLcode;
    pub fn curl_easy_perform(curl: *mut CURL) -> CURLcode;
    pub fn curl_easy_cleanup(curl: *mut CURL);
    pub fn curl_easy_getinfo(curl: *mut CURL, info: CURLINFO, ...) ->
     CURLcode;
    pub fn curl_easy_duphandle(curl: *mut CURL) -> *mut CURL;
    pub fn curl_easy_reset(curl: *mut CURL);
    pub fn curl_easy_recv(curl: *mut CURL, buffer: *mut c_void,
                          buflen: size_t, n: *mut size_t) -> CURLcode;
    pub fn curl_easy_send(curl: *mut CURL, buffer: *c_void, buflen: size_t,
                          n: *mut size_t) -> CURLcode;
    pub fn curl_multi_init() -> *mut CURLM;
    pub fn curl_multi_add_handle(multi_handle: *mut CURLM,
                                 curl_handle: *mut CURL) -> CURLMcode;
    pub fn curl_multi_remove_handle(multi_handle: *mut CURLM,
                                    curl_handle: *mut CURL) -> CURLMcode;
    pub fn curl_multi_fdset(multi_handle: *mut CURLM,
                            read_fd_set: *mut fd_set,
                            write_fd_set: *mut fd_set,
                            exc_fd_set: *mut fd_set, max_fd: *mut c_int) ->
     CURLMcode;
    pub fn curl_multi_wait(multi_handle: *mut CURLM, extra_fds: c_void,
                           extra_nfds: c_uint, timeout_ms: c_int,
                           ret: *mut c_int) -> CURLMcode;
    pub fn curl_multi_perform(multi_handle: *mut CURLM,
                              running_handles: *mut c_int) -> CURLMcode;
    pub fn curl_multi_cleanup(multi_handle: *mut CURLM) -> CURLMcode;
    pub fn curl_multi_info_read(multi_handle: *mut CURLM,
                                msgs_in_queue: *mut c_int) -> *mut CURLMsg;
    pub fn curl_multi_strerror(arg1: CURLMcode) -> *c_char;
    pub fn curl_multi_socket(multi_handle: *mut CURLM, s: curl_socket_t,
                             running_handles: *mut c_int) -> CURLMcode;
    pub fn curl_multi_socket_action(multi_handle: *mut CURLM,
                                    s: curl_socket_t, ev_bitmask: c_int,
                                    running_handles: *mut c_int) -> CURLMcode;
    pub fn curl_multi_socket_all(multi_handle: *mut CURLM,
                                 running_handles: *mut c_int) -> CURLMcode;
    pub fn curl_multi_timeout(multi_handle: *mut CURLM,
                              milliseconds: *mut c_long) -> CURLMcode;
    pub fn curl_multi_setopt(multi_handle: *mut CURLM,
                             option: CURLMoption, ...) -> CURLMcode;
    pub fn curl_multi_assign(multi_handle: *mut CURLM, sockfd: curl_socket_t,
                             sockp: *mut c_void) -> CURLMcode;
}
